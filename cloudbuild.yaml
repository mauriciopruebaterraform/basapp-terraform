steps:
  - name: gcr.io/$PROJECT_ID/docker-compose:$_DOCKER_COMPOSE_VERSION
    id: 'Spin up MySQL db instances'
    args: ['up', '-d', 'mysql']

  - name: node:$_NODE_VERSION
    id: 'Install dependencies'
    entrypoint: npm
    args: ['ci']
    waitFor: ['-']

  - name: node:$_NODE_VERSION
    id: 'Generate prisma types'
    entrypoint: npm
    args: ['run', 'prisma:generate']
    waitFor: ['Install dependencies']

  - name: node:$_NODE_VERSION
    id: 'Run type-check'
    entrypoint: npm
    args: ['run', 'type-check']
    waitFor: ['Generate prisma types']

  - name: node:$_NODE_VERSION
    id: 'Run linter'
    entrypoint: npm
    args: ['run', 'lint:ci']
    waitFor: ['Install dependencies']

  - name: node:$_NODE_VERSION
    id: 'Run unit tests'
    entrypoint: npm
    args: ['run', 'test']
    env:
      - DATABASE_URL=$_TESTING_DATABASE_URL
      - FIREBASE_DATABASE_URL=$_FIREBASE_DATABASE_URL
      - FIREBASE_PROJECT_ID=$_FIREBASE_PROJECT_ID
      - FIREBASE_CLIENT_EMAIL=$_FIREBASE_CLIENT_EMAIL
      - FIREBASE_PRIVATE_KEY=$_FIREBASE_PRIVATE_KEY
      - ALERTA_VECINAL_ID=$_ALERTA_VECINAL_ID
      - ALERTA_EMITIDA_ID=$_ALERTA_EMITIDA_ID
    waitFor: ['Run type-check', 'Run linter']

  - name: node:$_NODE_VERSION
    id: 'Run integration tests'
    entrypoint: bash
    args: ['-c', 'npm run migrations:test && npm run test:e2e']
    env:
      - DATABASE_URL=$_TESTING_DATABASE_URL
      - DATABASE_URL_GIROVISION=$_TESTING_DATABASE_URL_GIROVISION
      - PASSWORD_RESET_EXPIRATION=$_PASSWORD_RESET_EXPIRATION
      - PASSWORD_RESET_URL=$_PASSWORD_RESET_URL
      - SENDGRID_API_KEY=$_SENDGRID_API_KEY
      - SENDGRID_FROM=$_SENDGRID_FROM
      - JWT_EXPIRATION=$_JWT_EXPIRATION
      - JWT_SECRET=$_JWT_SECRET
      - GOOGLE_GEOCODING_API_KEY=$_GOOGLE_GEOCODING_API_KEY
      - FIREBASE_DATABASE_URL=$_FIREBASE_DATABASE_URL
      - FIREBASE_PROJECT_ID=$_FIREBASE_PROJECT_ID
      - FIREBASE_CLIENT_EMAIL=$_FIREBASE_CLIENT_EMAIL
      - FIREBASE_PRIVATE_KEY=$_FIREBASE_PRIVATE_KEY
      - EMITIDO_ID=$_EMITIDO_ID
      - ATENDIDO_ID=$_ATENDIDO_ID
      - ALERTA_VECINAL_ID=$_ALERTA_VECINAL_ID
      - ALERTA_EMITIDA_ID=$_ALERTA_EMITIDA_ID
    waitFor: ['Run unit tests', 'Spin up MySQL db instances']

  - name: gcr.io/$PROJECT_ID/docker-compose:$_DOCKER_COMPOSE_VERSION
    id: 'Stop MySQL database instance'
    args: ['stop', 'mysql']
    waitFor: ['Run integration tests']

  - name: gcr.io/cloud-builders/docker
    id: 'Build docker image'
    args:
      - build
      - '--no-cache'
      - '-t'
      - '$_ARTIFACT_LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPOSITORY/$_IMAGE_NAME:$COMMIT_SHA'
      - '-t'
      - '$_ARTIFACT_LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPOSITORY/$_IMAGE_NAME:latest'
      - .
      - '-f'
      - Dockerfile
    waitFor: ['-']

  - name: gcr.io/cloud-builders/docker
    id: 'Push docker image to artifact registry'
    args:
      - push
      - '$_ARTIFACT_LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPOSITORY/$_IMAGE_NAME'
      - '--all-tags'
    waitFor: ['Run integration tests', 'Build docker image']

    # Migrations for Basapp DB
  - name: gcr.io/$PROJECT_ID/docker-compose:$_DOCKER_COMPOSE_VERSION
    id: 'Run Cloud SQL Auth proxy for Basapp DB'
    args: ['up', '-d', 'cloud_sql_proxy_basapp']
    env:
      - DATABASE_CONNECTION_NAME=$_DATABASE_CONNECTION_NAME
    waitFor: ['Stop MySQL database instance']

    # It's important to run the migrations after the build and push is done, and before
    # deploying the artifact to Cloud Run
  - name: node:$_NODE_VERSION
    id: 'Run migrations for Basapp DB'
    entrypoint: npm
    args: ['run', 'migrations:prod:basapp']
    env:
      - DATABASE_URL=$_DATABASE_URL
    waitFor:
      [
        'Run Cloud SQL Auth proxy for Basapp DB',
        'Push docker image to artifact registry',
      ]

  - name: gcr.io/$PROJECT_ID/docker-compose:$_DOCKER_COMPOSE_VERSION
    id: 'Stop Cloud SQL Auth proxy for Basapp DB'
    args: ['stop', 'cloud_sql_proxy_basapp']
    env:
      - DATABASE_CONNECTION_NAME=$_DATABASE_CONNECTION_NAME
    waitFor: ['Run migrations for Basapp DB']

    # Migrations for Girovision DB
  - name: gcr.io/$PROJECT_ID/docker-compose:$_DOCKER_COMPOSE_VERSION
    id: 'Run Cloud SQL Auth proxy for Girovision DB'
    args: ['up', '-d', 'cloud_sql_proxy_girovision']
    env:
      - DATABASE_GIROVISION_CONNECTION_NAME=$_DATABASE_GIROVISION_CONNECTION_NAME
    waitFor: ['Stop Cloud SQL Auth proxy for Basapp DB']

  - name: node:$_NODE_VERSION
    id: 'Run migrations for Girovision DB'
    entrypoint: npm
    args: ['run', 'migrations:prod:girovision']
    env:
      - DATABASE_URL_GIROVISION=$_DATABASE_URL_GIROVISION
    waitFor: ['Run Cloud SQL Auth proxy for Girovision DB']

  - name: gcr.io/$PROJECT_ID/docker-compose:$_DOCKER_COMPOSE_VERSION
    id: 'Stop Cloud SQL Auth proxy for Girovision DB'
    args: ['stop', 'cloud_sql_proxy_girovision']
    env:
      - DATABASE_GIROVISION_CONNECTION_NAME=$_DATABASE_GIROVISION_CONNECTION_NAME
    waitFor: ['Run migrations for Girovision DB']

  # We only deploy the container to Cloud Run after updating the db schema
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'Deploy docker image to cloud run'
    args:
      - run
      - services
      - update
      - $_SERVICE_NAME
      - '--platform=managed'
      - '--image=$_ARTIFACT_LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPOSITORY/$_IMAGE_NAME:$COMMIT_SHA'
      - >-
        --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID
      - '--region=$_DEPLOY_REGION'
      - '--quiet'
    entrypoint: gcloud
    waitFor: ['Run migrations for Girovision DB']

options:
  machineType: 'E2_HIGHCPU_8'
timeout: 1500s

images:
  - '$_ARTIFACT_LOCATION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REPOSITORY/$_IMAGE_NAME'

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - basapp-replatform-develop
